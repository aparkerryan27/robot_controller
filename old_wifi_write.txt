
    int sock = 0;
    struct sockaddr_in serv_addr;
    char buffer[32] = {0};
    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0)
    {
        printf("\n Socket creation error \n");
        return -1;
    }
   
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(PORT);
       
    // Convert IPv4 and IPv6 addresses from text to binary form
    if(inet_pton(AF_INET, "192.168.137.10", &serv_addr.sin_addr)<=0) 
    {
        printf("\nInvalid address/ Address not supported \n");
        return -1;
    }
   
    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0)
    {
        printf("\nConnection Failed \n");
        return -1;
    }

    cout << "Starting controller input!!\n";
    
    char hello[32];
    
    while (true){  
        
        motors->axis1 = normalize(j.axes[1]);
        motors->axis2 = -1 * normalize(j.axes[4]);
        //snprintf(hello, 32, "%04d, %04d", motors->axis1, motors->axis2);
        if (send(sock, motors, 8 , 0 ) < 0 ){
            cout << "send fail! \n";
        }
        cout << "sent axes: " << motors->axis1 << "\t" << motors->axis2 << "\n";
        /*
        if ( read( sock , buffer, 32) < 0 ) {
            cout << "read fail! \n";
        }
        printf("%s\n",buffer );
        */
        usleep(50000);
    }

